library(agricolae)
library(dplyr)
library(nlme)
library(lme4)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(ggplot2)
# library(merTools)

# Percent function::
percent <- function(x, digits = 6, format = "f", ...) {paste0(formatC( x, format = format, digits = digits, ...), "%")}


setwd("C:/Users/Ryan.Ryan-PC/Desktop/wd")
df<-read.csv("18CC.csv", header=T, na.strings=c("", " ", "NA"))
CCF<-8.067
df <- df%>%mutate (yld = (wt*CCF*(100-moist)/84.5))
data<-subset(df, exp=="C81A")
data$REPid<-as.factor(paste(data$book.name, data$rep, sep="."))

data$book.name<-factor(data$book.name)
data$exp<-factor(data$exp)
data$entry<-factor(data$entry)
data$ped.id<-factor(data$ped.id)
data$code<-factor(data$code)
data$rng<-factor(data$rng)
data$pass<-factor(data$pass)
data$rep<-factor(data$rep)
data$plot<-factor(data$plot)


## Models::
# w/o Pass or Rng in most basic mixed model::
# Y = mean + Gene + Env + Gene(Env) + Env(Rep)
basic0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
basic1<-lmer(yld~entry + (1|book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
basic2<-lmer(yld~entry + book.name + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
basic3<-lmer(yld~entry + book.name + rep:book.name + (1|entry:book.name), data=data, REML=TRUE)

# w/Pass & Rng included to suit alpha-Lattice design::
# Y = mean + Gene + Env + Pass(Env*Rep) + Rng(Env*Rep) + Gene(Env) + Env(Rep)
model0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
model1<-lmer(yld~entry + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
model2<-lmer(yld~entry + book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
model3<-lmer(yld~entry + book.name + rep:book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name), data=data, REML=TRUE)

# Using REPid = (book.name).(rep)::
newv0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:REPid) + (1|rng:REPid) + (1|entry:book.name) + (1|REPid), data=data, REML=TRUE)
newv1<-lmer(yld~entry + (1|book.name) + (1|pass:REPid) + (1|rng:REPid) + (1|entry:book.name) + (1|REPid), data=data, REML=TRUE)
newv2<-lmer(yld~entry + book.name + (1|pass:REPid) + (1|rng:REPid) + (1|entry:book.name) + (1|REPid), data=data, REML=TRUE)
newv3<-lmer(yld~entry + book.name + REPid + (1|pass:REPid) + (1|rng:REPid) + (1|entry:book.name), data=data, REML=TRUE)
# w/NO single REPid effect, only nested::
newv4<-lmer(yld~entry + book.name + (1|pass:REPid) + (1|rng:REPid) + (1|entry:book.name), data=data, REML=TRUE)

# Should Random Effect : + (1|entry:book.name) really be + (1|entry/book.name)
extended0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry/book.name) + (1|rep:book.name), data=data, REML=TRUE)
extended1<-lmer(yld~entry + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry/book.name) + (1|rep:book.name), data=data, REML=TRUE)
extended2<-lmer(yld~entry + book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry/book.name) + (1|rep:book.name), data=data, REML=TRUE)
extended3<-lmer(yld~entry + book.name + rep:book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry/book.name), data=data, REML=TRUE)

# Should rep:book.name be dropped::
drop0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep), data=data, REML=TRUE)
drop1<-lmer(yld~entry + (1|book.name) + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name), data=data, REML=TRUE)
drop2<-lmer(yld~entry + book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name), data=data, REML=TRUE)
drop3<-lmer(yld~entry + book.name + (1|pass:book.name:rep) + (1|rng:book.name:rep) + (1|entry:book.name), data=data, REML=TRUE)

# Remove Rep in Pass & Rng??::
rep0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
rep1<-lmer(yld~entry + (1|book.name) + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
rep2<-lmer(yld~entry + book.name + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
rep3<-lmer(yld~entry + book.name + rep:book.name + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name), data=data, REML=TRUE)

# Remove all Rep??::
Repless0<-lmer(yld~1 + (1|entry) + (1|book.name) + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
Repless1<-lmer(yld~entry + (1|book.name) + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
Repless2<-lmer(yld~entry + book.name + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name) + (1|rep:book.name), data=data, REML=TRUE)
Repless3<-lmer(yld~entry + book.name + rep:book.name + (1|pass:book.name) + (1|rng:book.name) + (1|entry:book.name), data=data, REML=TRUE)


# Mixed Comparisons::
anova(basic1, basic2, basic3, refit=FALSE)
anova(model1, model2, model3, refit=FALSE)
anova(newv1, newv2, newv3, newv4, refit=FALSE)
anova(extended1, extended2, extended3, refit=FALSE)
anova(drop1, drop2, drop3, refit=FALSE)
anova(rep1, rep2, rep3, refit=FALSE)
anova(Repless1, Repless2, Repless3, refit=FALSE)

## Root Mean Square Error, RMSE::
rmse.basic1<-sqrt(mean(residuals(basic1)^2))
rmse.basic2<-sqrt(mean(residuals(basic2)^2))
rmse.basic3<-sqrt(mean(residuals(basic3)^2))
rmse.model1<-sqrt(mean(residuals(model1)^2))
rmse.model2<-sqrt(mean(residuals(model2)^2))
rmse.model3<-sqrt(mean(residuals(model3)^2))
rmse.newv1<-sqrt(mean(residuals(newv1)^2))
rmse.newv2<-sqrt(mean(residuals(newv2)^2))
rmse.newv3<-sqrt(mean(residuals(newv3)^2))
rmse.newv4<-sqrt(mean(residuals(newv4)^2))
rmse.extended1<-sqrt(mean(residuals(extended1)^2))
rmse.extended2<-sqrt(mean(residuals(extended2)^2))
rmse.extended3<-sqrt(mean(residuals(extended3)^2))
rmse.drop1<-sqrt(mean(residuals(drop1)^2))
rmse.drop2<-sqrt(mean(residuals(drop2)^2))
rmse.drop3<-sqrt(mean(residuals(drop3)^2))
rmse.rep1<-sqrt(mean(residuals(rep1)^2))
rmse.rep2<-sqrt(mean(residuals(rep2)^2))
rmse.rep3<-sqrt(mean(residuals(rep3)^2))
rmse.Repless1<-sqrt(mean(residuals(Repless1)^2))
rmse.Repless2<-sqrt(mean(residuals(Repless2)^2))
rmse.Repless3<-sqrt(mean(residuals(Repless3)^2))


## MumIn??
r2basic1<-r.squaredGLMM(basic1)
r2basic2<-r.squaredGLMM(basic2)
r2basic3<-r.squaredGLMM(basic3)
r2model1<-r.squaredGLMM(model1)
r2model2<-r.squaredGLMM(model2)
r2model3<-r.squaredGLMM(model3)
r2newv1<-r.squaredGLMM(newv1)
r2newv2<-r.squaredGLMM(newv2)
r2newv3<-r.squaredGLMM(newv3)
r2newv4<-r.squaredGLMM(newv4)
r2extended1<-r.squaredGLMM(extended1)
r2extended2<-r.squaredGLMM(extended2)
r2extended3<-r.squaredGLMM(extended3)
r2drop1<-r.squaredGLMM(drop1)
r2drop2<-r.squaredGLMM(drop2)
r2drop3<-r.squaredGLMM(drop3)
r2rep1<-r.squaredGLMM(rep1)
r2rep2<-r.squaredGLMM(rep2)
r2rep3<-r.squaredGLMM(rep3)
r2Repless1<-r.squaredGLMM(Repless1)
r2Repless2<-r.squaredGLMM(Repless2)
r2Repless3<-r.squaredGLMM(Repless3)
#or, SAME as R^2
LRbasic1<-r.squaredLR(basic1)
LRbasic2<-r.squaredLR(basic2)
LRbasic3<-r.squaredLR(basic3)
LRmodel1<-r.squaredLR(model1)
LRmodel2<-r.squaredLR(model2)
LRmodel3<-r.squaredLR(model3)
LRnewv1<-r.squaredLR(newv1)
LRnewv2<-r.squaredLR(newv2)
LRnewv3<-r.squaredLR(newv3)
LRnewv4<-r.squaredLR(newv4)
LRextended1<-r.squaredLR(extended1)
LRextended2<-r.squaredLR(extended2)
LRextended3<-r.squaredLR(extended3)
LRdrop1<-r.squaredLR(drop1)
LRdrop2<-r.squaredLR(drop2)
LRdrop3<-r.squaredLR(drop3)
LRrep1<-r.squaredLR(rep1)
LRrep2<-r.squaredLR(rep2)
LRrep3<-r.squaredLR(rep3)
LRRepless1<-r.squaredLR(Repless1)
LRRepless2<-r.squaredLR(Repless2)
LRRepless3<-r.squaredLR(Repless3)


# Linear Approaches::
Linear1<-lm(yld~entry, data=data)
Linear2<-lm(yld~entry + book.name, data=data)
Linear3<-lm(yld~entry + book.name + entry:book.name, data=data)
Linear4<-lm(yld~entry + book.name + rep:book.name, data=data)
Linear5<-lm(yld~entry + book.name + rep:book.name + entry:book.name, data=data)

#Same RSS::
Linear6<-lm(yld~entry + book.name + pass:book.name + rng:book.name, data=data)
Linear8<-lm(yld~entry + book.name + rep:book.name + pass:book.name + rng:book.name, data=data)
#Same RSS::
Linear7<-lm(yld~entry + book.name + entry:book.name + pass:book.name + rng:book.name, data=data)
Linear9<-lm(yld~entry + book.name + rep:book.name + entry:book.name + pass:book.name + rng:book.name, data=data)

Linear10<-lm(yld~entry + book.name + rep:book.name + pass:book.name:rep + rng:book.name:rep, data=data)
Linear11<-lm(yld~entry + book.name + rep:book.name + entry:book.name + pass:book.name:rep + rng:book.name:rep, data=data)
#w/ REPid = rep*book.name::
Linear12<-lm(yld~entry + book.name + REPid + entry:book.name + pass:REPid + rng:REPid, data=data)

## Linear Comparisons
anova(Linear1, Linear2, Linear3, Linear4, Linear5, Linear6, Linear7, Linear8, Linear9, Linear10, Linear11, Linear12)
# RMSE::
rmse.linear1<-sqrt(mean(residuals(Linear1)^2))
rmse.linear2<-sqrt(mean(residuals(Linear2)^2))
rmse.linear3<-sqrt(mean(residuals(Linear3)^2))
rmse.linear4<-sqrt(mean(residuals(Linear4)^2))
rmse.linear5<-sqrt(mean(residuals(Linear5)^2))
rmse.linear6<-sqrt(mean(residuals(Linear6)^2))
rmse.linear7<-sqrt(mean(residuals(Linear7)^2))
rmse.linear8<-sqrt(mean(residuals(Linear8)^2))
rmse.linear9<-sqrt(mean(residuals(Linear9)^2))
rmse.linear10<-sqrt(mean(residuals(Linear10)^2))
rmse.linear11<-sqrt(mean(residuals(Linear11)^2))
rmse.linear12<-sqrt(mean(residuals(Linear12)^2))
# R^2::
# The percentage of variation explained by the regression model. 
r2linear1<-summary(Linear1)$r.squared
r2linear2<-summary(Linear2)$r.squared
r2linear3<-summary(Linear3)$r.squared
r2linear4<-summary(Linear4)$r.squared
r2linear5<-summary(Linear5)$r.squared
r2linear6<-summary(Linear6)$r.squared
r2linear7<-summary(Linear7)$r.squared
r2linear8<-summary(Linear8)$r.squared
r2linear9<-summary(Linear9)$r.squared
r2linear10<-summary(Linear10)$r.squared
r2linear11<-summary(Linear11)$r.squared
r2linear12<-summary(Linear12)$r.squared
# Adj. R^2
adj.r2Linear1<-summary(Linear1)$adj.r.squared
adj.r2Linear2<-summary(Linear2)$adj.r.squared
adj.r2Linear3<-summary(Linear3)$adj.r.squared
adj.r2Linear4<-summary(Linear4)$adj.r.squared
adj.r2Linear5<-summary(Linear5)$adj.r.squared
adj.r2Linear6<-summary(Linear6)$adj.r.squared
adj.r2Linear7<-summary(Linear7)$adj.r.squared
adj.r2Linear8<-summary(Linear8)$adj.r.squared
adj.r2Linear9<-summary(Linear9)$adj.r.squared
adj.r2Linear10<-summary(Linear10)$adj.r.squared
adj.r2Linear11<-summary(Linear11)$adj.r.squared
adj.r2Linear12<-summary(Linear12)$adj.r.squared


## Variance of environment lsmeans::
## σ²e ::
ls1<-ls_means(model3, which = "book.name")
var(lss$Estimate)
# or, variance of hybrid lsmeans::
# σ²ȳ ::
ls2<-ls_means(model3, which = "entry")
var(lss$Estimate)


## Comparison Tables
RMSE.Table<-data.frame("Model"=c("Basic1", "Basic2", "Basic3", "Model1", "Model2", "Model3", "Newv1", "Newv2", "Newv3", "Newv4", "Extended1", "Extended2", "Extended3", "Drop1", "Drop2", "Drop3", "Rep1", "Rep2", "Rep3", "Repless1", "Repless2", "Repless3", "Linear1", "Linear2", "Linear3", "Linear4", "Linear5", "Linear6", "Linear7", "Linear8", "Linear9", "Linear10", "Linear11", "Linear12"),"Residual RMSE" = c(rmse.basic1, rmse.basic2, rmse.basic3, rmse.model1, rmse.model2, rmse.model3, rmse.newv1, rmse.newv2, rmse.newv3, rmse.newv4, rmse.extended1, rmse.extended2, rmse.extended3, rmse.drop1, rmse.drop2, rmse.drop3, rmse.rep1, rmse.rep2, rmse.rep3, rmse.Repless1, rmse.Repless2, rmse.Repless3, rmse.linear1, rmse.linear2, rmse.linear3, rmse.linear4, rmse.linear5, rmse.linear6, rmse.linear7, rmse.linear8, rmse.linear9, rmse.linear10, rmse.linear11, rmse.linear12))
rmse.order<-as.numeric(rank(RMSE.Table$Residual.RMSE))
RMSE.Table$Rank<-as.factor(paste(rmse.order))

R2.Table<-data.frame("Model"=c("Basic1", "Basic2", "Basic3", "Model1", "Model2", "Model3", "Newv1", "Newv2", "Newv3", "Newv4", "Extended1", "Extended2", "Extended3", "Drop1", "Drop2", "Drop3", "Rep1", "Rep2", "Rep3", "Repless1", "Repless2", "Repless3", "Linear1", "Linear2", "Linear3", "Linear4", "Linear5", "Linear6", "Linear7", "Linear8", "Linear9", "Linear10", "Linear11", "Linear12"),"Residual R2" = c(LRbasic1, LRbasic2, LRbasic3, LRmodel1, LRmodel2, LRmodel3, LRnewv1, LRnewv2, LRnewv3, LRnewv4, LRextended1, LRextended2, LRextended3, LRdrop1, LRdrop2, LRdrop3, LRrep1, LRrep2, LRrep3, LRRepless1, LRRepless2, LRRepless3, r2linear1, r2linear2, r2linear3, r2linear4, r2linear5, r2linear6, r2linear7, r2linear8, r2linear9, r2linear10, r2linear11, r2linear12))
r2.order<-as.numeric(rank(-R2.Table$Residual.R2))
R2.Table$Rank<-as.factor(paste(r2.order))

RMSE.R2.sigma_Table<-data.frame("Model"=c("Basic1", "Basic2", "Basic3", "Model1", "Model2", "Model3", "Newv1", "Newv2", "Newv3", "Newv4", "Extended1", "Extended2", "Extended3", "Drop1", "Drop2", "Drop3", "Rep1", "Rep2", "Rep3", "Repless1", "Repless2", "Repless3", "Linear1", "Linear2", "Linear3", "Linear4", "Linear5", "Linear6", "Linear7", "Linear8", "Linear9", "Linear10", "Linear11", "Linear12"),"Residual RMSE" = c(rmse.basic1, rmse.basic2, rmse.basic3, rmse.model1, rmse.model2, rmse.model3, rmse.newv1, rmse.newv2, rmse.newv3, rmse.newv4, rmse.extended1, rmse.extended2, rmse.extended3, rmse.drop1, rmse.drop2, rmse.drop3, rmse.rep1, rmse.rep2, rmse.rep3, rmse.Repless1, rmse.Repless2, rmse.Repless3, rmse.linear1, rmse.linear2, rmse.linear3, rmse.linear4, rmse.linear5, rmse.linear6, rmse.linear7, rmse.linear8, rmse.linear9, rmse.linear10, rmse.linear11, rmse.linear12), "Residual R2" = c(LRbasic1, LRbasic2, LRbasic3, LRmodel1, LRmodel2, LRmodel3, LRnewv1, LRnewv2, LRnewv3, LRnewv4, LRextended1, LRextended2, LRextended3, LRdrop1, LRdrop2, LRdrop3, LRrep1, LRrep2, LRrep3, LRRepless1, LRRepless2, LRRepless3, r2linear1, r2linear2, r2linear3, r2linear4, r2linear5, r2linear6, r2linear7, r2linear8, r2linear9, r2linear10, r2linear11, r2linear12), "Residual Sigma" = c(sig.basic1, sig.basic2, sig.basic3, sig.model1, sig.model2, sig.model3, sig.newv1, sig.newv2, sig.newv3, sig.newv4, sig.extended1, sig.extended2, sig.extended3, sig.drop1, sig.drop2, sig.drop3, sig.rep1, sig.rep2, sig.rep3, sig.Repless1, sig.Repless2, sig.Repless3, sig.linear1, sig.linear2, sig.linear3, sig.linear4, sig.linear5, sig.linear6, sig.linear7, sig.linear8, sig.linear9, sig.linear10, sig.linear11, sig.linear12))
rmsecomb.order<-as.numeric(rank(RMSE.R2.sigma_Table$Residual.RMSE))
r2comb.order<-as.numeric(rank(-RMSE.R2.sigma_Table$Residual.R2))
sigmacomb.order<-as.numeric(rank(RMSE.R2.sigma_Table$Residual.Sigma))
RMSE.R2.sigma_Table$RMSE.Rank<-as.factor(paste(rmsecomb.order))
RMSE.R2.sigma_Table$R2.Rank<-as.factor(paste(r2comb.order))
RMSE.R2.sigma_Table$Sigma.Rank<-as.factor(paste(sigmacomb.order))
RMSE.R2.sigma_Table

## Begin calculation to determine amount of variance explained by each fixed effect::
## https://stats.stackexchange.com/questions/185936/variance-explained-by-each-fixed-variable-linear-mixed-model
sum1<-summary(model1)
rvar1<-as.numeric(VarCorr(model1))
rvariance <- sum(rvar1)
an1<-anova(model1)
fvar1<-an1$`Sum Sq`
n<-length(data$rec.id)
fvariance<-n/fvar1
wholevariance<-as.numeric(r.squaredLR(model1))
Fixed1<-(wholevariance*fvariance)/(rvariance+fvariance)

sum2<-summary(model2)
rvar2<-as.numeric(VarCorr(model2))
rvariance2<-sum(rvar2)
an2<-anova(model2)
fvar2<-an2$`Sum Sq`
fvar2a<-fvar2[1]
fvar2b<-fvar2[2]
fvariance2a<-n/fvar2a
fvariance2b<-n/fvar2b
wholevariance2<-as.numeric(r.squaredLR(model2))
Fixed2A<-(wholevariance2*fvariance2a)/(rvariance2+fvariance2a+fvariance2b)
Fixed2B<-(wholevariance2*fvariance2b)/(rvariance2+fvariance2a+fvariance2b)

sum3<-summary(model3)
rvar3<-as.numeric(VarCorr(model3))
rvariance3<-sum(rvar3)
an3<-anova(model3)
fvar3<-an3$`Sum Sq`
fvar3a<-fvar3[1]
fvar3b<-fvar3[2]
fvar3c<-fvar3[3]
fvariance3a<-n/fvar3a
fvariance3b<-n/fvar3b
fvariance3c<-n/fvar3c
wholevariance3<-as.numeric(r.squaredLR(model3))
Fixed3A<-(wholevariance3*fvariance3a)/(rvariance3+fvariance3a+fvariance3b+fvariance3c)
Fixed3B<-(wholevariance3*fvariance3b)/(rvariance3+fvariance3a+fvariance3b+fvariance3c)
Fixed3C<-(wholevariance3*fvariance3c)/(rvariance3+fvariance3a+fvariance3b+fvariance3c)


## Residual Variance - "sc"=residual standard deviation, (sd^2=variance)
## the physical variance of the error, or the variability around the regression line. 
## Minimize this value to limit residual variance from line of best fit. 
ErrorVar1<-attr(VarCorr(model1),"sc")^2
ErrorVar2<-attr(VarCorr(model2),"sc")^2
ErrorVar3<-attr(VarCorr(model3),"sc")^2
# or
sig.basic1<-as.numeric(summary(basic1)$sigma^2)
sig.basic2<-as.numeric(summary(basic2)$sigma^2)
sig.basic3<-as.numeric(summary(basic3)$sigma^2)
sig.model1<-as.numeric(summary(model1)$sigma^2)
sig.model2<-as.numeric(summary(model2)$sigma^2)
sig.model3<-as.numeric(summary(model3)$sigma^2)
sig.newv1<-as.numeric(summary(newv1)$sigma^2)
sig.newv2<-as.numeric(summary(newv2)$sigma^2)
sig.newv3<-as.numeric(summary(newv3)$sigma^2)
sig.newv4<-as.numeric(summary(newv4)$sigma^2)
sig.extended1<-as.numeric(summary(extended1)$sigma^2)
sig.extended2<-as.numeric(summary(extended2)$sigma^2)
sig.extended3<-as.numeric(summary(extended3)$sigma^2)
sig.drop1<-as.numeric(summary(drop1)$sigma^2)
sig.drop2<-as.numeric(summary(drop2)$sigma^2)
sig.drop3<-as.numeric(summary(drop3)$sigma^2)
sig.rep1<-as.numeric(summary(rep1)$sigma^2)
sig.rep2<-as.numeric(summary(rep2)$sigma^2)
sig.rep3<-as.numeric(summary(rep3)$sigma^2)
sig.Repless1<-as.numeric(summary(Repless1)$sigma^2)
sig.Repless2<-as.numeric(summary(Repless2)$sigma^2)
sig.Repless3<-as.numeric(summary(Repless3)$sigma^2)

sig.linear1<-as.numeric(summary(Linear1)$sigma^2)
sig.linear2<-as.numeric(summary(Linear2)$sigma^2)
sig.linear3<-as.numeric(summary(Linear3)$sigma^2)
sig.linear4<-as.numeric(summary(Linear4)$sigma^2)
sig.linear5<-as.numeric(summary(Linear5)$sigma^2)
sig.linear6<-as.numeric(summary(Linear6)$sigma^2)
sig.linear7<-as.numeric(summary(Linear7)$sigma^2)
sig.linear8<-as.numeric(summary(Linear8)$sigma^2)
sig.linear9<-as.numeric(summary(Linear9)$sigma^2)
sig.linear10<-as.numeric(summary(Linear10)$sigma^2)
sig.linear11<-as.numeric(summary(Linear11)$sigma^2)
sig.linear12<-as.numeric(summary(Linear12)$sigma^2)

Sigma.Table<-data.frame("Model"=c("Basic1", "Basic2", "Basic3", "Model1", "Model2", "Model3", "Newv1", "Newv2", "Newv3", "Newv4", "Extended1", "Extended2", "Extended3", "Drop1", "Drop2", "Drop3", "Rep1", "Rep2", "Rep3", "Repless1", "Repless2", "Repless3", "Linear1", "Linear2", "Linear3", "Linear4", "Linear5", "Linear6", "Linear7", "Linear8", "Linear9", "Linear10", "Linear11", "Linear12"),"Residual Sigma" = c(sig.basic1, sig.basic2, sig.basic3, sig.model1, sig.model2, sig.model3, sig.newv1, sig.newv2, sig.newv3, sig.newv4, sig.extended1, sig.extended2, sig.extended3, sig.drop1, sig.drop2, sig.drop3, sig.rep1, sig.rep2, sig.rep3, sig.Repless1, sig.Repless2, sig.Repless3, sig.linear1, sig.linear2, sig.linear3, sig.linear4, sig.linear5, sig.linear6, sig.linear7, sig.linear8, sig.linear9, sig.linear10, sig.linear11, sig.linear12))
sigma.order<-as.numeric(rank(Sigma.Table$Residual.Sigma))
Sigma.Table$Rank<-as.factor(paste(sigma.order))

## Variance accounted for by random effects:
RandVar1<-as.numeric(VarCorr(model1))
RandVar1<-sum(RandVar1)
RandVar2<-as.numeric(VarCorr(model2))
RandVar2<-sum(RandVar2)
RandVar3<-as.numeric(VarCorr(model3))
RandVar3<-sum(RandVar3)


## Total variance from dataset::
less<-data %>% select("yld")
VAR<-as.numeric(var(less, na.rm=TRUE))


## Percentage of variance caused by error::
PercentErr1<-percent(ErrorVar1/VAR)
PercentErr2<-percent(ErrorVar2/VAR)
PercentErr3<-percent(ErrorVar3/VAR)
PercentErr1
PercentErr2
PercentErr3

## Percentage of variance accounted for by random effects::
PercentRand1<-percent(RandVar1/VAR)
PercentRand2<-percent(RandVar2/VAR)
PercentRand3<-percent(RandVar3/VAR)
PercentRand1
PercentRand2
PercentRand3



## Simulated/Bootstrapped Prediction Intervals::

## Test 1
## merTools::predictIntervals Method
simm<-data %>% select("book.name", "rep", "entry", "pass", "rng", "yld")

PI<-merTools::predictInterval(model1, simm, level=0.95, n.sims=100, stat=c("median"), type=c("linear.prediction"), include.resid.var=TRUE)
# ggplot(aes(x=1:100, y=fit, ymin=lwr, ymax=upr), data=PI[1:100,]) + 
#   geom_point() + geom_linerange() + labs(x="Index", y="Prediction w/95% PI") + theme_bw()

##lme4::bootMer() Method
mySumm <- function(.) {predict(., newdata=simm, re.form=NULL)}
sumBoot <- function(merBoot) {return(data.frame(fit = apply(merBoot$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
  lwr = apply(merBoot$t, 2, function(x) as.numeric(quantile(x, probs=.025, na.rm=TRUE))),
  upr = apply(merBoot$t, 2, function(x) as.numeric(quantile(x, probs=.975, na.rm=TRUE)))))}

boot1 <- lme4::bootMer(model1, mySumm, nsim=250, use.u=FALSE, type="parametric")

PI.boot1 <- sumBoot(boot1)

# comp.data <- rbind(data.frame(Predict.Method="predictInterval()", x=(1:nrow(PI))-0.1, PI), data.frame(Predict.Method="lme4::bootMer() - Method 1", x=(1:nrow(PI.boot1))+0.1, PI.boot1))
# 
# ggplot(aes(x=x, y=fit, ymin=lwr, ymax=upr, color=Predict.Method), data=comp.data[c(1:30,181:210),]) +
#   geom_point() +
#   geom_linerange() +
#   labs(x="Index", y="Prediction w/ 95% PI") +
#   theme_bw() +  theme(legend.position="bottom") +
#   scale_color_brewer(type = "qual", palette = 2)

## Averages (boot v. predict)
mean(PI.boot1$fit)
mean(PI$fit)

## Interval
(mean(PI.boot1$upr)) 
(mean(PI.boot1$lwr))
## Interval Range:
(mean(PI.boot1$upr))-(mean(PI.boot1$lwr))

## Test2
## merTools::predictIntervals Method
PI2<-merTools::predictInterval(model2, simm, level=0.95, n.sims=250, stat=c("median"), type=c("linear.prediction"), include.resid.var=TRUE)
# ggplot(aes(x=1:100, y=fit, ymin=lwr, ymax=upr), data=PI2[1:100,]) + 
#   geom_point() + geom_linerange() + labs(x="Index", y="Prediction w/95% PI") + theme_bw()

##lme4::bootMer() Method
boot2 <- lme4::bootMer(model2, mySumm, nsim=250, use.u=FALSE, type="parametric")

PI.boot2 <- sumBoot(boot2)

# comp.data2 <- rbind(data.frame(Predict.Method="predictInterval()", x=(1:nrow(PI2))-0.1, PI), data.frame(Predict.Method="lme4::bootMer() - Method 1", x=(1:nrow(PI.boot2))+0.1, PI.boot2))

# ggplot(aes(x=x, y=fit, ymin=lwr, ymax=upr, color=Predict.Method), data=comp.data2[c(1:250),]) +
#   geom_point() +
#   geom_linerange() +
#   labs(x="Index", y="Prediction w/ 95% PI") +
#   theme_bw() +  theme(legend.position="bottom") +
#   scale_color_brewer(type = "qual", palette = 2)

## Averages
mean(PI.boot2$fit)
mean(PI2$fit)

## Interval
(mean(PI.boot2$upr)) 
(mean(PI.boot2$lwr))
## Interval Range:
(mean(PI.boot2$upr))-(mean(PI.boot2$lwr))


## Test2
## merTools::predictIntervals Method
PI3<-merTools::predictInterval(model3, simm, level=0.95, n.sims=250, stat=c("median"), type=c("linear.prediction"), include.resid.var=TRUE)
# ggplot(aes(x=1:100, y=fit, ymin=lwr, ymax=upr), data=PI2[1:100,]) + 
#   geom_point() + geom_linerange() + labs(x="Index", y="Prediction w/95% PI") + theme_bw()

##lme4::bootMer() Method
boot3<-lme4::bootMer(model3, mySumm, nsim=250, use.u=FALSE, type="parametric")

PI.boot3<-sumBoot(boot3)

# comp.data3 <- rbind(data.frame(Predict.Method="predictInterval()", x=(1:nrow(PI2))-0.1, PI3), data.frame(Predict.Method="lme4::bootMer() - Method 1", x=(1:nrow(PI.boot2))+0.1, PI.boot2))

# ggplot(aes(x=x, y=fit, ymin=lwr, ymax=upr, color=Predict.Method), data=comp.data3[c(1:250),]) +
#   geom_point() +
#   geom_linerange() +
#   labs(x="Index", y="Prediction w/ 95% PI") +
#   theme_bw() +  theme(legend.position="bottom") +
#   scale_color_brewer(type = "qual", palette = 2)

mean(PI.boot3$fit)
mean(PI3$fit)

## Interval
(mean(PI.boot3$upr))
## to---->
(mean(PI.boot3$lwr))
## Interval Range:
(mean(PI.boot3$upr))-(mean(PI.boot3$lwr))


#Repeatabilities (ICC):
library(rptR)
repeat1<-rpt(yld~book.name:entry + book.name + rep:book.name + pass:book.name:rep + rng:book.name:rep + (1|entry), grname=c("entry", "Fixed", "Residual"), data=simm, datatype = c("Gaussian"), CI = 0.95, nboot = 250, ratio = FALSE)
plot(repeat1,cex.main=1)
summary(repeat1)

repeat2<-rpt(yld~book.name + rep:book.name + pass:book.name:rep + rng:book.name:rep + (1|entry), grname=c("entry", "Fixed", "Residual"), data=simm, datatype = c("Gaussian"), CI = 0.95, nboot = 250)
plot(repeat2,cex.main=1)
summary(repeat2)

repeat3<-rpt(yld~book.name:entry + rep:book.name + pass:book.name:rep + rng:book.name:rep + (1|entry), grname=c("entry", "Fixed", "Residual"), data=simm, datatype = c("Gaussian"), CI = 0.95, nboot = 250)
plot(repeat3,cex.main=1)
summary(repeat3)


## Anything here??
tempa3 <- glm(yld ~ entry + book.name + rep %in% (book.name) + entry:book.name, family = gaussian , data=data )
  #Supposed MS error term??  
  #model summary
  summary1 <- summary.glm(tempa3)
  #Error SS
  error_ss<- as.data.frame(summary1$deviance)
  error_ss1 <- error_ss %>%
  #rename variable
  select (Deviance = starts_with("summary"), everything())
  #Error DF
  error_df<- as.data.frame(summary1$df.residual)
  error_df1 <- error_df %>%
  #rename variable
  select (Df = starts_with("summary"), everything())
  #MS of error
  mse1 <- as.data.frame(error_ss1/error_df1)
