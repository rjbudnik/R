#Load Required Libraries:
library(agricolae)
library(dplyr)
library(nlme)
library(lme4)
library(LMERConvenienceFunctions)
library(lmerTest)
library(devtools)
# install_github("stats4sd/LSDer")
# library(emmeans)

#Set wd, Import CSV Data, and Quickly Check Data:
setwd("C:/Users/rjbudnik/Desktop/wd")
df<-read.csv("yt18.csv", header=T, na.strings=c("", " ", "NA"))

#Calculate yield for entire dataset,
#Adds a new column named "yld":
CCF<-8.067
df <- df%>%mutate (yld = (wt*CCF))

# BCF<-7.779
# df <- df%>%mutate (yld = (wt*BCF))

#Subset data of interest:
#Here you will be selecting the single location data from the master list that
#will be analyzed using a mixed model. Entries must be specified!
#e.g. New Data <- subset(data, ==experiment code, %in%c(entry numbers)):
#Use Code>RenameinScope (ctrl+Alt+Shift+M) to replace all dataset names at once when changin Experiments:
CF811<-subset(df, book.name=="CF811", entry %in% c(1:45))
#Subset the Desired Experiment:
CF811_C81A<-subset(CF811, exp=="C81A")

#View Classifications & Set Factors:
str(CF811_C81A)
CF811_C81A$entry<-factor(CF811_C81A$entry)
CF811_C81A$ped.id<-factor(CF811_C81A$ped.id)
CF811_C81A$code<-factor(CF811_C81A$code)
CF811_C81A$range<-factor(CF811_C81A$range)
CF811_C81A$pass<-factor(CF811_C81A$pass)
CF811_C81A$rep<-factor(CF811_C81A$rep)


#Set IQRS:
max <- quantile(CF811_C81A$yld,0.75, na.rm=TRUE) + (IQR(CF811_C81A$yld, na.rm=TRUE) * 1.5 )
min <- quantile(CF811_C81A$yld,0.25, na.rm=TRUE) - (IQR(CF811_C81A$yld, na.rm=TRUE) * 1.5 )
#Exploratory:
attach(CF811_C81A)
summary(CF811_C81A)
library(colorRamps)
histo<-hist(CF811_C81A$yld, breaks=seq(0,300, l=90), col="purple", main="Distribution of Yield", xlab="Yld")

#Remove All Low Values Identified in  Histogram (e.g.< 150 bu/ac)
NoLow<-CF811_C81A[CF811_C81A$yld <=150 , ]
NoLowRows<-as.numeric(rownames(NoLow))
HistoClean<-CF811_C81A
HistoClean$yld<-replace(HistoClean$yld, NoLowRows, NA)

#Model Without Histogram Identified Low Yields:
model4<-lmer(yld~entry + (1 | rep) + (1|rep:pass) + (1 | rep:range), data=HistoClean, REML=TRUE)
summary(model4)
anova(model4)
anovalmer(model4)
ranova(model4)
LSDer::CVer(model4)
LSDer::LSDer(model4, "entry")

palette <- primary.colors(length(unique(CF811_C81A$entry)))
CF811_C81A$color <- palette[as.factor(CF811_C81A$entry)]
barplot(CF811_C81A$yld, names.arg=CF811_C81A$entry, ylim=c(0,260), ylab="yld", xlab="id", col=CF811_C81A$color)

library(car)
Boxplot(CF811_C81A$yld~CF811_C81A$entry,id=TRUE, main="2018 Yield Across Entries", xlab="entry", ylab="Yld")
abline(h = max, col="red")
abline(h = min, col="red")

#Determine Data Balance & Immediate Outlier Detection:
aggregate(yld~entry, data=CF811_C81A, FUN=function(x) c(n=length(x), min=min(x), mean=mean(x), max=max(x)))

#Modeling:
model1<-lmer(yld~entry + (1 | rep) + (1|rep:pass) + (1 | rep:range), data=CF811_C81A, REML=TRUE)
library(predictmeans)
summary(model1)
anova(model1)
anovalmer(model1)
ranova(model1)
LSDer::CVer(model1)
LSDer::LSDer(model1, "entry")
# predictmeans(model1, "entry", pairwise=TRUE, Df=44, level=.25)

#More Modeling, Post-Residual Outlier Removal:
#i.e. Exclude Outliers = romr.fnc(model, data, trim = # of stddev above/below the residual means)
#You designate the trim number, check qq and residual plots for corresponding trim #
# ResidualClean<-romr.fnc(model1, CF811_C81A, trim = 2.5)
# model2<-lmer(yld~entry + (1 | rep) + (1|rep:pass) + (1 | rep:range), data=ResidualClean[["data"]], REML=TRUE)
# summary(model2)
# anova(model2)
# anovalmer(model2)
# ranova(model2)
# LSDer::CVer(model2)
# LSDer::LSDer(model2, "entry")
# predictmeans(model2, "entry", pairwise=TRUE, Df=44, level=.25)

#Outliers & Plots:
# residplot(model1)
# residplot(model2)

qq<-qqnorm(resid(model1))
qqline(resid(model1), col="red")
# influential1<-identify(qqnorm(resid(model1)))
# QQClean<-CF811_C81A
# QQClean$yld<-replace(QQClean$yld, influential1, NA)

# plot.lme(model1)
# covariatemeans(model1, covariate="entry")

# library(outliers)
# grubbs.test(CF811$yld, type = 10, opposite = FALSE, two.sided = FALSE)
# grubbs.test(CF811$yld, type = 10, opposite = TRUE, two.sided = FALSE)

#Outliers via Cook's Distance:
cooksd<-CookD(model1, newwd=FALSE)
abline(h = 50/sample_size, col="red")
# identify(cooksd)

#New Clean Dataset, Where "Influential" Values Determined Via Cook's Distance have been set to NA:
# sample_size <- nrow(CF811)
# influential2 <- as.numeric(names(cooksd)[(cooksd > (h=50/sample_size))])
# CooksClean<-CF811_C81A
# CooksClean$yld<-replace(CooksClean$yld, influential2, NA)
# #Cooks Clean Model:
# model3<-lmer(yld~entry + (1 | rep) + (1|rep:pass) + (1 | rep:range), data=CooksClean, REML=TRUE)
# summary(model3)
# anova(model3)
# anovalmer(model3)
# ranova(model3)
# LSDer::CVer(model3)
# LSDer::LSDer(model3, "entry")

#Export Clean CSV Dataset:
# write.csv(CooksClean, "C:/Users/rjbudnik/Desktop/R_Cleaned/CooksClean_CF811_C81A.csv")
# write.csv(QQClean, "C:/Users/rjbudnik/Desktop/R_Cleaned/QQClean_CF811_C81A.csv")
# write.csv(HistoClean, "C:/Users/rjbudnik/Desktop/R_Cleaned/HistoClean_CF811_C81A.csv")
# write.csv(ResidualClean, "C:/Users/rjbudnik/Desktop/R_Cleaned/ResidualClean_CF811_C81A.csv")


#Sjstats Package:
# library(sjstats)
# anova_stats(model1)
# grpmean(CF811_C81A, yld)
# cv(model1)
# converge_ok(model1)

#LS Means Pairwise???
# library(emmeans)
# print(lsmeans(model1, list(pairwise ~ entry)), adjust = c("tukey"))
